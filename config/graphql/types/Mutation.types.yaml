Mutation:
  type: object
  config:
    fields:
      auth:
        type: AuthorizedUser!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\UserMutation::auth", [args])'
        args:
          input:
            type: UserInput!
      register:
        type: AuthorizedUser!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\UserMutation::register", [args])'
        args:
          input:
            type: RegisterInput!
      restore:
        type: Result!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\UserMutation::restore", [args])'
        args:
          input:
            type: RestoreInput!
      isTokenValid:
        type: Result!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\UserMutation::isTokenValid", [args])'
        args:
          input:
            type: TokenInput!
      changePassword:
        type: AuthorizedUser!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\UserMutation::changePassword", [args])'
        args:
          input:
            type: ChangePasswordInput!
      addBasket:
        type: Basket!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\BasketMutation::add", [args])'
        args:
          input:
            type: AddBasketInput!
      removeBasket:
        type: Basket!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\BasketMutation::remove", [args])'
        args:
          input:
            type: AddBasketInput!
      updateBasket:
        type: Basket!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\BasketMutation::update", [args])'
        args:
          input:
            type: UpdateBasketInput!
      order:
        type: Order!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\OrderMutation::create", [args])'
        args:
          input:
            type: OrderInput
      createAddress:
        type: Address!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\AddressMutation::create", [args])'
        args:
          input:
            type: CreateAddressInput!
      updateAddress:
        type: Addresses!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\AddressMutation::update", [args])'
        args:
          input:
            type: UpdateAddressInput!
      removeAddress:
        type: Result!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\AddressMutation::remove", [args])'
        args:
          input:
            type: EntityIdInput!
      updateUser:
        type: User!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\UserMutation::update", [args])'
        args:
          input:
            type: UpdateUserInput!
      addRecipe:
        type: Recipe!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\RecipeMutation::add", [args])'
        args:
          input:
            type: NewRecipeInput!
      updateRecipe:
        type: Recipe!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\RecipeMutation::update", [args])'
        args:
          input:
            type: UpdateRecipeInput!
      deleteRecipe:
        type: Recipe!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\RecipeMutation::delete", [args])'
        args:
          input:
            type: EntityIdInput!
      applyCoupon:
        type: Basket!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\CouponMutation::apply", [args])'
        args:
          input:
            type: CouponInput!
      instashopClick:
        type: Result!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\InstashopMutation::click", [args])'
        args:
          input:
            type: InstashopClickInput!
      instashopPurchases:
        type: Result!
        resolve: '@=mutation("App\\GraphQL\\Mutation\\InstashopMutation::purchases", [args])'
        args:
          input:
            type: InstashopPurchasesInput!
