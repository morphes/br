# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'ru'
    email_from: '%env(MAILER_FROM)%'
    app.path.product_images: /uploads/images/products
    app.path.import_product: /public/uploads/import/
    app.path.ProductItemImage: '%kernel.project_dir%/public/uploads/items'
    app.url.ProductItemImage: '/uploads/items'
    app.path.ProductItemTagItem: '%kernel.project_dir%/public/uploads/tag_items'
    app.url.ProductItemTagItem: '/uploads/tag_items'
    app.path.Catalog: '%kernel.project_dir%/public/uploads/catalog'
    app.url.Catalog: '/uploads/catalog'
    app.path.BannerItem: '%kernel.project_dir%/public/uploads/banneritem'
    app.url.BannerItem: '/uploads/banneritem'
    app.path.Menu: '%kernel.project_dir%/public/uploads/menu'
    app.url.Menu: '/uploads/menu'
    app.path.ImageManager: '%kernel.project_dir%/public/uploads/imagemanager'
    app.url.ImageManager: '/uploads/imagemanager'
    app.path.locale_dir: '%kernel.project_dir%/front/src/lang/'
    lense_tags:
       - { key: 'simple', value: 'Простой' }
       - { key: 'receipt', value: 'Рецептурный' }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
    orders.subscriber:
      class: App\EventSubscriber\OrdersSubscriber
      tags:
          - { name: doctrine.event_subscriber, connection: default }

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    Doctrine\ORM\EntityManager: "@doctrine.orm.default_entity_manager"
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Mailer\Mailer:
        arguments:
            $mailFrom: '%email_from%'

    App\Service\FileUploader:
        arguments:
            $targetDirectory: '%app.path.ProductItemImage%'

    App\Service\JsonService:
        arguments:
            $localeDir: '%app.path.locale_dir%'

    App\Event\LocaleSubscriber:
        arguments: ['%kernel.default_locale%']

    App\Service\CouponService:
        arguments:
            $productItemRepository: '@App\Repository\ProductItemRepository'

    App\Service\InfoService:
        arguments:
            $externalService: '@App\Service\BeguService'

    Redis:
        class: Redis
        calls:
            - method: connect
              arguments:
                  - '%env(REDIS_HOST)%'
                  - '%env(int:REDIS_PORT)%'
            # If you need key prefix, uncomment line belows
            # - method: setOption
            #   arguments:
            #       - !php/const Redis::OPT_PREFIX
            #       - 'my_prefix'

    Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
        arguments:
            - '@Redis'

    _instanceof:
        Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface:
            tags: ['overblog_graphql.resolver']
        Overblog\GraphQLBundle\Definition\Resolver\MutationInterface:
            tags: ['overblog_graphql.mutation']


